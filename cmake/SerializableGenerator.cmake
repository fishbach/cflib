# This function generates implementations for serializable classes (see the sub-project `cflib/serialize`).
#
# The generation is comprised of:
#
#   1. Find all header files under the specified `TARGET`.
#   2. Filter all header files that have the string "SERIALIZE_CLASS".
#   3. Execute the `ser` application to generate implementations.
#   4. Register the implementation files to the specified `TARGET`.
#
# :param TARGET: The target that holds serializable classes.
# :type TARGET: CMake target.
#
function(generate_implementations_for)

    cmake_parse_arguments(_ "" "TARGET" "" ${ARGN})

    __find_headers(${__TARGET} headers)
    __filter_serializeable_headers("${headers}")
    __generate_implementations(${__TARGET} "${headers}" implementations)
    __register_implementations(${__TARGET} "${implementations}")

endfunction(generate_implementations_for)

#
# PRIVATE implementations
#

function(__find_headers target headers)

    get_target_property(dir ${target} SOURCE_DIR)

    file(
        GLOB_RECURSE findings CONFIGURE_DEPENDS
        RELATIVE ${dir}
        *.h)

    set(headers
        ${findings}
        PARENT_SCOPE)

endfunction(__find_headers)

function(__filter_serializeable_headers headers)

    set(findings)

    foreach(header ${headers})
        file(STRINGS ${header} lines REGEX "SERIALIZE_CLASS")
        if(lines)
            message(VERBOSE "Found autogeneration candidate ${header}")
            list(APPEND findings ${header})
        endif()
    endforeach()

    set(headers
        ${findings}
        PARENT_SCOPE)

endfunction(__filter_serializeable_headers)

function(__generate_implementations target headers implementations)

    get_target_property(binary_dir ${target} BINARY_DIR)
    get_target_property(source_dir ${target} SOURCE_DIR)

    set(target_folder ${binary_dir}/autogenerated)
    set(files)

    file(MAKE_DIRECTORY ${target_folder})

    foreach(header ${headers})
        __filename_from_header(${header} filename)
        set(file ${target_folder}/${filename})
        add_custom_command(
            OUTPUT ${file}
            COMMAND ser serialize ${source_dir}/${header} ${file}
            DEPENDS ${source_dir}/${header}
            VERBATIM)
        list(APPEND files ${file})
    endforeach()

    set(implementations
        ${files}
        PARENT_SCOPE)

endfunction(__generate_implementations)

function(__filename_from_header header filename)

    string(REPLACE "/" "_" file_stem ${header})
    string(REPLACE ".h" "" file_stem ${file_stem})

    set(filename
        ${file_stem}_ser.cpp
        PARENT_SCOPE)

endfunction(__filename_from_header)

function(__register_implementations target implementations)

    target_sources(${target} PRIVATE ${implementations})

endfunction(__register_implementations)
