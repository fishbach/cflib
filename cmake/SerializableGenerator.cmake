#
# generate_implementations_for( TARGET target )
#
function(generate_implementations_for)

    cmake_parse_arguments(_ "" "TARGET" "" ${ARGN})

    __find_headers(${__TARGET} headers)
    __filter_serializeable_headers("${headers}")
    __generate_implementations(${__TARGET} "${headers}")

endfunction(generate_implementations_for)

#
# PRIVATE
#
function(__find_headers target headers)

    get_target_property(dir ${target} SOURCE_DIR)

    file(GLOB_RECURSE findings
        CONFIGURE_DEPENDS
        RELATIVE ${dir}
        *.h
    )

    set(headers ${findings} PARENT_SCOPE)

endfunction(__find_headers)

#
# PRIVATE
#
function(__filter_serializeable_headers headers)

    set(findings)

    foreach(header ${headers})
        file(STRINGS ${header} lines REGEX "SERIALIZE_CLASS")
        if(lines)
            message("Found autogeneration candidate ${header}")
            list(APPEND findings ${header})
        endif()
    endforeach()

    set(headers ${findings} PARENT_SCOPE)

endfunction(__filter_serializeable_headers)

#
# PRIVATE
#
function(__generate_implementations target headers)

    get_target_property(binary_dir ${target} BINARY_DIR)
    get_target_property(source_dir ${target} SOURCE_DIR)

    set(target_folder ${binary_dir}/autogenerated)
    set(files)

    file(MAKE_DIRECTORY ${target_folder})

    foreach(header ${headers})
        __filename_from_header(${header} filename)
        set(file ${target_folder}/${filename})
        add_custom_command(
            OUTPUT   ${file}
            COMMAND  ser serialize ${source_dir}/${header} ${file}
            DEPENDS  ${source_dir}/${header}
            VERBATIM
        )
        list(APPEND files ${file})
    endforeach()

    target_sources(${target}
        PRIVATE ${files}
    )

endfunction(__generate_implementations)

#
# PRIVATE
#
function(__filename_from_header header filename)

    string(REPLACE "/" "_" file_stem ${header})
    string(REPLACE ".h" "" file_stem ${file_stem})

    set(filename ${file_stem}_ser.cpp PARENT_SCOPE)

endfunction(__filter_serializeable_headers)
